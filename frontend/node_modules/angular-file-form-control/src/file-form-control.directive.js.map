{"version":3,"file":"file-form-control.directive.js","sourceRoot":"","sources":["../../src/file-form-control.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,YAAY,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AAC7D,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAC,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AAClD,OAAO,EAAC,KAAK,EAAE,IAAI,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAC,QAAQ,EAAC,MAAM,+BAA+B,CAAC;;;;IAW5C,2CAAQ,aAAC,KAAU;;QAEtB,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC;QACjC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SAC5C;QAAC,IAAI,CAAC,CAAC;YACJ,IAAM,UAAU,GAAG,UAAC,KAAiB,EAAE,IAAU,IAAK,OAAI,KAAK,SAAE,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAA/B,CAAgC,CAAC;YACvF,QAAQ,CACJ,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE,CAAC,CACrD,CAAC,IAAI,CACF,IAAI,CAAC,CAAC,CAAC,CACV,CAAC,SAAS,CAAC,UAAC,KAAiB,IAAK,OAAA,KAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,KAAK,CAAC,EAApC,CAAoC,CAAC,CAAC;SAC5E;;IAGG,4CAAS,GAAjB,UAAkB,IAAU;QACxB,MAAM,CAAC,IAAI,UAAU,CAAW,UAAC,UAAU;YACvC,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,IAAM,QAAQ,GAAG,cAAM,OAAA,UAAU,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,EAAC,CAAC,EAAzE,CAAyE,CAAC;YACjG,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC9B,CAAC,CAAC,IAAI,CACH,KAAK,EAAE,CACV,CAAC;KACL;mCAxCL","sourcesContent":["import {Directive, HostListener, Input} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {Observable} from 'rxjs/Observable';\nimport {forkJoin} from 'rxjs/observable/forkJoin';\nimport {first, take} from 'rxjs/operators';\nimport {FileJson} from './file-form-control.interface';\n\n@Directive({\n    selector: 'input[type=file][fileFormControl]',\n})\n\nexport class FileFormControlDirective {\n\n    @Input() private fileFormControl: FormControl;\n\n    @HostListener('change', ['$event'])\n    public onChange(event: any) {\n\n        const files = event.target.files;\n        if (!(files && files.length > 0)) {\n            this.fileFormControl.setValue(undefined);\n        } else {\n            const callbackFn = (array: FileJson[], file: File) => [...array, this.transform(file)];\n            forkJoin(\n                Array.prototype.reduce.call(files, callbackFn, []),\n            ).pipe(\n                take(1),\n            ).subscribe((value: FileJson[]) => this.fileFormControl.setValue(value));\n        }\n    }\n\n    private transform(file: File): Observable<FileJson> {\n        return new Observable<FileJson>((subscriber) => {\n            const reader = new FileReader();\n            const listener = () => subscriber.next({name: file.name, type: file.type, value: reader.result});\n            reader.addEventListener('load', listener);\n            reader.readAsDataURL(file);\n        }).pipe(\n            first(),\n        );\n    }\n}\n"]}